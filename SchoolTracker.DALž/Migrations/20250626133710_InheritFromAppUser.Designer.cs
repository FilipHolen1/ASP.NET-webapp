// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolTracker.DAL;

#nullable disable

namespace SchoolTracker.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250626133710_InheritFromAppUser")]
    partial class InheritFromAppUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolTracker.Model.AppUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("ID");

                    b.ToTable("AppUser");

                    b.HasDiscriminator<string>("UserType").HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SchoolTracker.Model.ClassYear", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("ClassYears");
                });

            modelBuilder.Entity("SchoolTracker.Model.Grade", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("StudentID", "SubjectID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolTracker.Model.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProfesorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProfesorID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolTracker.Model.Profesor", b =>
                {
                    b.HasBaseType("SchoolTracker.Model.AppUser");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Profesor");
                });

            modelBuilder.Entity("SchoolTracker.Model.Student", b =>
                {
                    b.HasBaseType("SchoolTracker.Model.AppUser");

                    b.Property<int>("ClassYearID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("ClassYearID");

                    b.ToTable("AppUser", t =>
                        {
                            t.Property("Email")
                                .HasColumnName("Student_Email");

                            t.Property("FirstName")
                                .HasColumnName("Student_FirstName");

                            t.Property("LastName")
                                .HasColumnName("Student_LastName");
                        });

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("SchoolTracker.Model.Grade", b =>
                {
                    b.HasOne("SchoolTracker.Model.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTracker.Model.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolTracker.Model.Subject", b =>
                {
                    b.HasOne("SchoolTracker.Model.Profesor", "Profesor")
                        .WithMany("Subjects")
                        .HasForeignKey("ProfesorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("SchoolTracker.Model.Student", b =>
                {
                    b.HasOne("SchoolTracker.Model.ClassYear", "ClassYear")
                        .WithMany("Students")
                        .HasForeignKey("ClassYearID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassYear");
                });

            modelBuilder.Entity("SchoolTracker.Model.ClassYear", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolTracker.Model.Subject", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SchoolTracker.Model.Profesor", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SchoolTracker.Model.Student", b =>
                {
                    b.Navigation("Grades");
                });
#pragma warning restore 612, 618
        }
    }
}
