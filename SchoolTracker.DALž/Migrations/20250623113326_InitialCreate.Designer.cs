// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolTracker.DAL;

#nullable disable

namespace SchoolTracker.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250623113326_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolTracker.Model.Predmet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfesorId");

                    b.ToTable("Predmeti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Matematika",
                            ProfesorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Fizika",
                            ProfesorId = 2
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Kemija",
                            ProfesorId = 3
                        });
                });

            modelBuilder.Entity("SchoolTracker.Model.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Profesori");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ime = "Ana",
                            Prezime = "Anić"
                        },
                        new
                        {
                            Id = 2,
                            Ime = "Marko",
                            Prezime = "Marić"
                        },
                        new
                        {
                            Id = 3,
                            Ime = "Petra",
                            Prezime = "Petrić"
                        });
                });

            modelBuilder.Entity("SchoolTracker.Model.Razred", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Razredi");
                });

            modelBuilder.Entity("SchoolTracker.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RazredId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RazredId");

                    b.ToTable("Studenti");
                });

            modelBuilder.Entity("SchoolTracker.Model.StudentPredmet", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("PredmetId")
                        .HasColumnType("int");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "PredmetId");

                    b.HasIndex("PredmetId");

                    b.ToTable("StudentPredmeti");
                });

            modelBuilder.Entity("SchoolTracker.Model.Predmet", b =>
                {
                    b.HasOne("SchoolTracker.Model.Profesor", "Profesor")
                        .WithMany("Predmeti")
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("SchoolTracker.Model.Student", b =>
                {
                    b.HasOne("SchoolTracker.Model.Razred", "Razred")
                        .WithMany("Studenti")
                        .HasForeignKey("RazredId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Razred");
                });

            modelBuilder.Entity("SchoolTracker.Model.StudentPredmet", b =>
                {
                    b.HasOne("SchoolTracker.Model.Predmet", "Predmet")
                        .WithMany("StudentPredmeti")
                        .HasForeignKey("PredmetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTracker.Model.Student", "Student")
                        .WithMany("StudentPredmeti")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Predmet");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolTracker.Model.Predmet", b =>
                {
                    b.Navigation("StudentPredmeti");
                });

            modelBuilder.Entity("SchoolTracker.Model.Profesor", b =>
                {
                    b.Navigation("Predmeti");
                });

            modelBuilder.Entity("SchoolTracker.Model.Razred", b =>
                {
                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("SchoolTracker.Model.Student", b =>
                {
                    b.Navigation("StudentPredmeti");
                });
#pragma warning restore 612, 618
        }
    }
}
